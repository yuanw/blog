---
title: Using Hakyll with Github Action and firebase (Nix Edition)
date: January 29, 2020
summary: static site generation using Haskell and nix
lastModified: March 21, 2020
description: write blog using Hakyll, publish using nix, github action, and firebase
---

* Why
So I have been learning nix, and want to write down my experiences. 
I had a simple github page blog generated by Hakyll.
Nothing fancy, I just followed Erik Stevenson's [[https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html][tutorial]]. 

The tutorial assumes you use [[https://docs.haskellstack.org/en/stable/README/][Stack]]. So I gave a try to nixify my github page repo as a practice.
I did find some blog posts about using Hakyll with Nix ([[https://deptype.com/posts/2019-02-21-create-blog-nix-hakyll-aws.html][aws]] and [[https://terrorjack.com/posts/2018-11-18-hello-world.html][netlify]]). 
Using github page with Hakyll is a little awkward (Switching between master and
source branches).
netlify seems really nice, but the pages load speed seems inconsistent in my limited experience.
So I want to give [[https://firebase.google.com/docs/hosting/quickstart][firebase]] a try. One can also use google cloud storage to [[https://cloud.google.com/storage/docs/hosting-static-website][host]] a static site, but currently it does not 
suppport SSL. 

Setting up a CI tool for publish blog is probably overkill. 
But it is fun to experiment cachix and github action.
I am pleasantly surprised by how great cachix is.
Right now, I use [[https://help.github.com/en/actions/automating-your-workflow-with-github-actions][Github Actions]] as CI tool. It works reasonable well. You can checkout the code [[https://github.com/yuanw/blog/blob/819329bef87f6019f1444dd0744d89a0e034c1c8/.github/workflows/main.yml][here]].

* Setup
** [[https://nixos.org/nix/download.html][Install]] nix (single user or multiple user mode)
** [[https://all-hies.cachix.org/][enable all-hies cachix]] (optional)
#+begin_src shell
nix-env -iA cachix -f https://cachix.org/api/v1/install #only for the first time
cachix use all-hies
#+end_src
* Boostrap the project
stack has a project template for Hakyll. In nix, we need *hakyll-init* to boostrap our project.
The easist way to do that is 
#+begin_src shell
nix-shell -p haskellPackages.hakyll
hakyll-init <siteName>
#+end_src
This would start a nix-shell with hakyll package.
The project is a plain cabal project, we can use normal nix-haskell development workflow.
#+begin_src shell
cd <siteName>
nix-shell -p cabal2nix # unless you already installed cabal2nix globally
cabal2nix . > blog.nix
#+end_src
** Write shell.nix for local development
I like to use [[https://github.com/target/lorri][lorri]] to watch the nix shell configuration. To use lorri, we need
install `direnv` and `lorri` either using `nix-env` or home-manager.
#+begin_src shell
lorri init # init .envrc and shell.nix
direnv allow # enable direnv
lorri daemon & # or lorri daemon & disown
#+end_src
On linux, you can start [[https://github.com/target/lorri#setup-on-nixos-or-with-home-manager-on-linux][lorri daemon]] way easier

#+begin_src nix
{ nixpkgs ? import <nixpkgs> {} , compiler ? "ghc882" }:
let
  inherit (nixpkgs) haskellPackages;
  myPackages = haskellPackages.callCabal2nix "project" ./blog.cabal  {};

  bootstrap = import <nixpkgs> { };
  all-hies = import (fetchTarball "https://github.com/infinisil/all-hies/tarball/master") {};
in
haskellPackages.shellFor {
  withHoogle = true;
  packages = p: [myPackages];
  buildInputs = with nixpkgs.haskellPackages;
    [ hlint
      ghcid
      ormolu
      cabal2nix
      cabal-fmt
      cabal-install
      wai-app-static
      (all-hies.selection {selector = p: {inherit (p) ghc882; };})
    ] ++ [nixpkgs.nodejs
         ];
}
#+end_src

I use all-hies
** Wire [[https://github.com/cachix/pre-commit-hooks.nix][pre-commit]] hook (optional)
You add pre-commit hook to check whether all the nix, cabal, and haskell are
well formatted.
** default.nix for CI

#+begin_src nix
{ nixpkgs ? import <nixpkgs> {}, compiler ? "ghc882" }:

let
  inherit (nixpkgs) pkgs;
  f = import ./blog.nix;
  haskellPackages = if compiler == "default"
                    then pkgs.haskellPackages
                    else pkgs.haskell.packages.${compiler};

  drv = haskellPackages.callPackage f {};
in
  drv
#+end_src
* Wire 3rd party comments
Since the site is static, supporting comments is tricky. Common solutions are
- https://disqus.com/features/engage
- https://muut.com/tour/
- https://commento.io/
- https://staticman.net/
* Github Action
** Pin down nixpkgs for CI
For a stable CI experience, I decided to [[https://github.com/Gabriel439/haskell-nix/tree/master/project0#pinning-nixpkgs][pin]] down *nixpkgs*.
#+begin_src shell
nix-prefetch-git https://github.com/NixOS/nixpkgs.git 50e7173b959562680103edb476ce55f971d8293e > nixpkgs.json
#+end_src
So my local machine and CI is using the same nixpkgs.
** Store firebase token
https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
** Enable cachix cache
https://github.com/cachix/cachix-action
* References
- https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html
- https://deptype.com/posts/2019-02-21-create-blog-nix-hakyll-aws.html
- https://terrorjack.com/posts/2018-11-18-hello-world.html
- https://github.com/Gabriel439/haskell-nix/


