
[[https://builtwithnix.org/badge.svg]]

* Vision

I have been learning nix for a while. Overall, I am really happy with Nix ecosystem. With Nix, home-manager,
cachix, you have setup a reliable and efficient development environment and CI.
For demonstration, I want to show you how I use nix to publish my blog:
 - build a [[https://jaspervdj.be/hakyll/][Hakyll]] program
 - generate the content
 - publish to Firebase

I hope you find something useful in this article.

** Why Nix ecosystem

If you are not familiar with nix, please check out [[nix.dev][nix.dev]]

** Why Hakyll

Because I love Haskell

** Why Firebase
- [[https://deptype.com/posts/2019-02-21-create-blog-nix-hakyll-aws.html][aws]] s3
- [[https://terrorjack.com/posts/2018-11-18-hello-world.html][netlify]] seems really nice. probably worth trying out
- Google cloud storage can [[https://cloud.google.com/storage/docs/hosting-static-website][host]] a static site, but currently it does not support SSL.

* Required Tools
- [[https://nixos.org/manual/nix/stable/#chap-installation][nix]] (either single user or multi-user installation would work)
- [[https://direnv.net/][direnv]] or [[https://github.com/nix-community/nix-direnv][nix-direnv]] recommend using [[https://github.com/nix-community/home-manager][home-manager]] to get [[https://github.com/nix-community/home-manager/blob/master/modules/programs/direnv.nix][it]])
- [[https://github.com/target/lorri][lorri]] (optional, only if direnv by itself doesn't work well enough for you)
- [[https://cachix.org/][cachix]]


* Start with [[https://github.com/nix-dot-dev/getting-started-nix-template][getting-started-nix-template]]
~gh repo create hakyll-blog -p nix-dot-dev/getting-started-nix-template~


stack has a project template for Hakyll. In nix, we need *hakyll-init* to bootstrap our project.
The easiest way to do that is
#+begin_src shell
nix-shell -p haskellPackages.hakyll
hakyll-init .
#+end_src

#+begin_src nix
  # provided by shell.nix
  devTools = {
    inherit (pkgs) niv pre-commit;
    inherit (pkgs.haskellPackages) hakyll;
  };
#+end_src
~hakyll-init .~


* scaffold hakyll project using ~hakyll-init~
#+begin_src shell
nix-shell -p pkgs.haskellPackages.hakyll

error: Package ‘hakyll-4.13.4.0’ in /nix/store/bbdw33ilm0x8vznxq00xz90dbkyzi6cs-nixpkgs-21.03pre243353.6d4b93323e7/nixpkgs/pkgs/development/haskell-modules/hackage-packages.nix:112535 is marked as broken, refusing to evaluate.

a) For `nixos-rebuild` you can set
  { nixpkgs.config.allowBroken = true; }
in configuration.nix to override this.

b) For `nix-env`, `nix-build`, `nix-shell` or any other Nix command you can add
  { allowBroken = true; }
to ~/.config/nixpkgs/config.nix.

(use '--show-trace' to show detailed location information)
#+end_src

~nix-shell -p pkgs.haskellPackages.hakyll -I nixpkgs=https://github.com/NixOS/nixpkgs-channels/archive/14006b724f3d1f25ecf38238ee723d38b0c2f4ce.tar.gz~

The project is just a plain cabal project, we can use normal Nix-Haskell development workflow.

* Add Haskell into the project
#+begin_src shell
nix-shell -p cabal2nix # unless you already installed cabal2nix globally
cabal2nix . > blog.nix
#+end_src


#+begin_src nix
{ project ? import ./nix {}
}:
let
  haskellPackages = project.pkgs.haskellPackages;
  packages = haskellPackages.callCabal2nix "blog" ./blog.cabal {};
in
haskellPackages.shellFor {
  withHoogle = true;
  packages = p: [ packages ];
  buildInputs = builtins.attrValues project.devTools;
  shellHook = ''
    ${project.ci.pre-commit-check.shellHook}
  '';
}
#+end_src
https://discourse.nixos.org/t/nix-haskell-development-2020/6170
~hoogle server --local -p 3000 -n~

** How to find certain package's version
#+begin_src shell
nix repl
nix-repl> sources = import ./nix/sources.nix
nix-repl> pkgs = import sources.nixpkgs {}
nix-repl> pkgs.haskellPackages.hakyll.version
"4.13.0.1"
nix-repl> :q
#+end_src

* How to customize Hakyll
https://robertwpearce.com/hakyll-pt-1-setup-and-initial-customization.html
* GitHub Action
** Pin down nixpkgs for CI
For a stable CI experience, I decided to [[https://github.com/Gabriel439/haskell-nix/tree/master/project0#pinning-nixpkgs][pin]] down *nixpkgs*.
#+begin_src shell
nix-prefetch-git https://github.com/NixOS/nixpkgs.git 50e7173b959562680103edb476ce55f971d8293e > nixpkgs.json
#+end_src
So my local machine and CI is using the same nixpkgs.

** Store Firebase token
https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
** Enable cachix cache
https://github.com/cachix/cachix-action

* References
- https://robertwpearce.com/hakyll-pt-6-pure-builds-with-nix.html
- https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html
- https://github.com/Gabriel439/haskell-nix/
- https://nix.dev/
